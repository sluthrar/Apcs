package app;

import java.util.Arrays;
import java.util.Scanner;

public class Exc8 {
	public static int numer1;
	public static int finalwhole;
	public static int num1;
	public static int denom1;
	public static int num2;
	public static int numer2;
	public static int denom2;
	public static int impropnum1;
	public static int eqden;
	public static int impropnum2;
	public static int finalimprop;
	public static String numbone;
	public static String numbtwo;
	public static String whole;
	public static String numerone;
	public static String denone;
	public static String whole2;
	public static String numerone2;
	public static String denone2;
	public static String f1;
	public static String op;
	/* 1/7 * 3/7 
	1/3 * -1/5
	1/2 * 2/3 
	3 * -1 
	1_11/25 * 3_1/8 
	3/10 * 10/3 
*/
	public static void main(String[] args) {
		String f1 = null;
		System.out.println("Welcome to my calculator.");
		System.out.println("Enter expression:");
		Scanner tree = new Scanner(System.in);
		f1 = tree.nextLine();
		if (f1.equals("quit") || f1.equals("")) {
			System.out.println("bye!");
		}
		while (!f1.equals("quit")) {
			
			String[] tokens = f1.split(" "); // parsing by white space

			if (tokens.length != 3) {
				System.out.println("Invalid string"); // this is if the user wrongly inputs the equation
				System.exit(0);
			}
			numbone = tokens[0];
			op = tokens[1];
			numbtwo = tokens[2];

			processfractions(); // this converts String into the whole, numerator and denominator integers

			if (op.contains("+")) { // solving for addition
				Addfractionsmix();
				simplify();
				convtomix();
				if (finalwhole < 0) { // these if statements are if the whole is negative
					finalimprop = finalimprop * 1;
				}
				if (finalwhole == 0 && finalimprop == 0) {
					System.out.println(0);
				}
				if (finalwhole == 0 && !(finalimprop == 0)) {
					System.out.println(finalimprop + "/" + eqden);
				}
				if (finalimprop == 0 && !(finalwhole == 0)) {
					System.out.println(finalwhole);
				}
				if (!(finalwhole == 0) && !(finalimprop == 0)) {
					System.out.println(finalwhole + " " + finalimprop + "/" + eqden);
				} // these if statements are if the whole or improper = 0 and we want to make the output simpler
			}
			if (op.contains("*")) { // solving for multiplication
				Multiplyfractions();
				simplify();
				convtomix();
				if (finalwhole == 0 && !(finalimprop == 0)) {
					System.out.println(finalimprop + "/" + eqden);
				} else if (finalimprop == 0 && !(finalwhole == 0)) {
					System.out.println(finalwhole);
				} else if (!(finalimprop == 0) && !(finalwhole == 0)) {
					System.out.println(finalwhole + " " + finalimprop + "/" + eqden);
				} else {
					System.out.println(0);
				}

			}
			if (op.contains("-")) { // solving for subtraction
				subtract();
				simplify();
				convtomix();
				if (finalwhole == 0 && !(finalimprop == 0)) {
					System.out.println(finalimprop + "/" + eqden);
				} else if (finalimprop == 0 && !(finalwhole == 0)) {
					System.out.println(finalwhole);
				}
				if (!(finalimprop == 0) && !(finalwhole == 0)) {
					System.out.println(finalwhole + " " + finalimprop + "/" + eqden);
				}
			}
			if (op.contains("/")) { // solving for division
				divide();
				simplify();
				convtomix();
				if (finalwhole == 0 && !(finalimprop == 0)) {
					System.out.println(finalimprop + "/" + eqden);
				} else if (finalimprop == 0 && !(finalwhole == 0)) {
					System.out.println(finalwhole);
				} else if (!(finalimprop == 0) && !(finalwhole == 0)) {
					System.out.println(finalwhole + " " + finalimprop + "/" + eqden);
				} else
					System.out.println("Undefined");

			}
			System.out.println("Enter expression:");
			f1 = tree.nextLine();
		}
	}

	private static void processfractions() { // chops String up into three parts then converts them to integers
		if (numbone.contains("_")) {
			whole = numbone.substring(0, numbone.indexOf("_"));
			numerone = (String) numbone.substring(numbone.indexOf("_") + 1, numbone.indexOf("/"));
			denone = (String) numbone.substring(numbone.indexOf("/") + 1);
			num1 = Integer.parseInt(whole);
			numer1 = Integer.parseInt(numerone);
			denom1 = Integer.parseInt(denone);
			numer1 = (denom1 * num1) + numer1; // CONVERTS ALL INPUTS TO IMPROPER FRACTIONS ALTHOUGH OUTPUT IS MIXED
		} else if (numbone.contains("/") && !numbone.contains("_")) {
			numerone = numbone.substring(0, numbone.indexOf("/"));
			denone = (String) numbone.substring(numbone.indexOf("/") + 1);
			numer1 = Integer.parseInt(numerone);
			denom1 = Integer.parseInt(denone);

		} else {
			whole = numbone;
			num1 = Integer.parseInt(whole);
			numer1 = num1;
			denom1 = 1;
		}
		if (numbtwo.contains("_")) {
			whole2 = numbtwo.substring(0, numbtwo.indexOf("_"));
			numerone2 = numbtwo.substring(numbtwo.indexOf("_") + 1, numbtwo.indexOf("/"));
			denone2 = numbtwo.substring(numbtwo.indexOf("/") + 1);
			numer2 = Integer.parseInt(numerone2);
			denom2 = Integer.parseInt(denone2);
			num2 = Integer.parseInt(whole2);
			numer2 = (denom2 * num2) + numer2;

		} else if (numbtwo.contains("/") && !numbtwo.contains("_")) {
			numerone2 = numbtwo.substring(0, numbtwo.indexOf("/"));
			denone2 = (String) numbtwo.substring(numbtwo.indexOf("/") + 1);
			numer2 = Integer.parseInt(numerone2);
			denom2 = Integer.parseInt(denone2);

		}

		else {
			whole2 = numbtwo;
			num2 = Integer.parseInt(whole2);
			numer2 = num2;
			denom2 = 1;
		}
	}

	private static void Addfractionsmix() {
		eqden = denom2 * denom1;
		impropnum1 = numer1 * denom2;
		impropnum2 = numer2 * denom1;
		finalimprop = impropnum1 + impropnum2;
	}

	private static void simplify() {

		int finalimprop_abs = Math.abs(finalimprop);
		int eqden_abs = Math.abs(eqden);

		int min_num = Math.min(finalimprop_abs, eqden_abs);

		int divisor = 1;

		for (int i = 1; i <= min_num; i++) {
			if (finalimprop % i == 0 && eqden % i == 0) {

				divisor = i;
			} // end if
		} // end for
		finalimprop = finalimprop / divisor;
		eqden = eqden / divisor;
	}// end reduce

	private static void Multiplyfractions() {
		finalimprop = numer1 * numer2;
		eqden = denom1 * denom2;
	}

	private static void subtract() {
		eqden = denom1 * denom2;
		impropnum1 = numer1 * denom2;
		impropnum2 = numer2 * denom1;
		finalimprop = impropnum1 - impropnum2;
	}

	private static void rearrange() {
		num2 = num1;
		num1 = num2;
	}

	private static void divide() {
		finalimprop = numer1 * denom2;
		eqden = denom1 * numer2;
	}

	private static void convtomix() {
		finalwhole = finalimprop / eqden;
		finalimprop = finalimprop % eqden;
		eqden = eqden;
	}

	private static void negative() {

	}

	private static void square() {
		int x = numer1 * numer1;
		int c = denom1 * denom1;
		System.out.println(x + " " + c);
	}
}
